/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/app.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/app.js":
/*!********************!*\
  !*** ./src/app.js ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const { landingHtml } = __webpack_require__(/*! ./landing/landing */ \"./src/landing/landing.js\");\nconst { createHtml } = __webpack_require__(/*! ./create/create */ \"./src/create/create.js\");\nconst {\n  pencil, eraser, bucket, stroke, picker, bucketall, canvasHistory\n} = __webpack_require__(/*! ./create/canvasTools */ \"./src/create/canvasTools.js\");\nconst { removeActiveTool, removeActiveFrame, markActiveTile } = __webpack_require__(/*! ./create/functions */ \"./src/create/functions.js\");\n\nif (window.location.pathname === '/') {\n  landingHtml();\n} else {\n  createHtml();\n\n  const spanRange = document.querySelector('.number-FPS');\n  const inputRange = document.querySelector('.range-FPS');\n  const ulList = document.querySelector('.preview-list');\n  const repeatFPS = document.querySelector('.repeat-mini-map');\n  const inputColor = document.querySelector('.left-mouse');\n  const currentColor = ['#ff0000'];\n  let stopInterval;\n  let size;\n\n  inputColor.addEventListener('input', ({ target }) => {\n    const hasActive = document.querySelectorAll('.pencil, .bucket, .stroke, .bucketall');\n    for (let i = 0; i < hasActive.length; i += 1) {\n      if (hasActive[i].hasAttribute('style')) {\n        let tool = hasActive[i].className;\n        console.log(tool);\n      }\n    };\n    \n    currentColor[0] = target.value;\n    console.log(currentColor);\n  });\n\n  inputRange.addEventListener('input', ({ target }) => {\n    spanRange.textContent = `${target.value} FPS`;\n    clearInterval(stopInterval);\n    if (target.value > 0) {\n      let i = 0;\n      stopInterval = setInterval(() => {\n        repeatFPS.setAttribute('style', `background-image: url(${canvasHistory[i % canvasHistory.length]});background-repeat:no-repeat;`);\n        i += 1;\n      }, 1000 / target.value);\n    }\n  });\n\n  document.addEventListener('click', ({ target }) => {\n    if (target.parentNode.className === 'resize') {\n      const resizeList = document.querySelector('.resize');\n      const hasActive = document.querySelectorAll('.pencil, .eraser, .stroke');\n      for (let i = 0; i < resizeList.children.length; i += 1) {\n        resizeList.children[i].classList.remove('active-gold');\n      }\n      for (let i = 0; i < hasActive.length; i += 1) {\n        if (hasActive[i].hasAttribute('style')) {\n          let tool = hasActive[i].className;\n          if (target.classList[0] === 'size32') {\n            size = 8;\n            target.classList.add('active-gold');\n            tool += '(8)';\n          }\n          if (target.classList[0] === 'size64') {\n            size = 4;\n            target.classList.add('active-gold');\n            tool += '(4)';\n          }\n          if (target.classList[0] === 'size128') {\n            size = 2;\n            target.classList.add('active-gold');\n            tool += '(2)';\n          }\n          eval(tool);\n        };\n      }\n    }\n    if (target.parentNode.className === 'add-frame-action' || target.className === 'add-frame-action') {\n      removeActiveFrame();\n      const cloneFrame = ulList.childNodes[ulList.childNodes.length - 2].cloneNode(true);\n      cloneFrame.childNodes[4].textContent = `${ulList.childNodes.length}`;\n      cloneFrame.setAttribute('id', `${ulList.childNodes.length - 1}`);\n      cloneFrame.setAttribute('class', 'preview-tile li-selected');\n      ulList.childNodes[ulList.childNodes.length - 2].after(cloneFrame);\n      canvasHistory.push(cloneFrame.children[0].children[1].toDataURL());\n\n      const canvasMain = document.getElementById('mycanvas');\n      const ctx = canvasMain.getContext('2d');\n      ctx.clearRect(0, 0, canvasMain.width, canvasMain.height);\n    }\n    if (target.className === 'pencil') {\n      removeActiveTool(target);\n      pencil(size, currentColor[0]);\n    }\n    if (target.className === 'bucket') {\n      removeActiveTool(target);\n      bucket(currentColor[0]);\n    }\n    if (target.className === 'eraser') {\n      removeActiveTool(target);\n      eraser(size);\n    }\n    if (target.className === 'stroke') {\n      removeActiveTool(target);\n      stroke(size, currentColor[0]);\n    }\n    if (target.className === 'picker') {\n      removeActiveTool(target);\n      picker();\n    }\n    if (target.className === 'bucketall') {\n      removeActiveTool(target);\n      bucketall(currentColor[0]);\n    }\n    if (target.className === 'tile-view-canvas') {\n      removeActiveFrame();\n      markActiveTile(target, canvasHistory);\n    }\n    if (target.classList[1] === 'delete-button') {\n      if (target.parentNode.classList[1] === 'li-selected') {\n        if (target.parentNode.parentNode.children.length > 2) {\n          target.parentNode.remove();\n          ulList.children[0].setAttribute('class', 'preview-tile li-selected');\n\n          const canvasMain = document.getElementById('mycanvas');\n          const ctx = canvasMain.getContext('2d');\n          ctx.clearRect(0, 0, canvasMain.width, canvasMain.height);\n\n          const img = new Image();\n          img.src = canvasHistory[ulList.children[0].id];\n          img.onload = () => {\n            ctx.drawImage(img, 0, 0, canvasMain.width, canvasMain.height);\n          };\n          canvasHistory.splice(target.parentNode.id, 1);\n\n          // update index\n          for (let i = 0; i < ulList.childNodes.length - 1; i += 1) {\n            ulList.childNodes[i].children[4].textContent = i + 1;\n            ulList.childNodes[i].id = i;\n          }\n        }\n      } else {\n        target.parentNode.remove();\n        canvasHistory.splice(target.parentNode.id, 1);\n        // update index\n        for (let i = 0; i < ulList.childNodes.length - 1; i += 1) {\n          ulList.childNodes[i].children[4].textContent = i + 1;\n          ulList.childNodes[i].id = i;\n        }\n      }\n    }\n    if (target.classList[1] === 'clone-button') {\n      removeActiveFrame();\n      const node = target.parentNode.cloneNode(true);\n      node.setAttribute('class', 'preview-tile li-selected');\n      const ctx = node.children[0].children[1].getContext('2d');\n      const img = new Image();\n      img.src = canvasHistory[target.parentNode.id];\n      img.onload = () => {\n        ctx.drawImage(img, 0, 0, node.children[0].children[1].width, node.children[0].children[1].height);\n      };\n\n      // update array\n      const copy = canvasHistory[target.parentNode.id];\n      canvasHistory.splice(target.parentNode.id, 0, copy);\n\n      target.parentNode.after(node);\n\n      // update index\n      for (let i = 0; i < ulList.childNodes.length - 1; i += 1) {\n        ulList.childNodes[i].children[4].textContent = i + 1;\n        ulList.childNodes[i].id = i;\n      }\n    }\n  });\n\n  size = 8;\n  pencil(size, currentColor[0]);\n\n  let i = 0;\n  stopInterval = setInterval(() => {\n    repeatFPS.setAttribute('style', `background-image: url(${canvasHistory[i % canvasHistory.length]});background-repeat:no-repeat;`);\n    i += 1;\n  }, 1000 / 2);\n\n  // drag and drop\n  let dragged;\n  let id;\n  let index;\n  let indexDrop;\n  let list;\n\n  document.addEventListener('dragstart', ({ target }) => {\n    dragged = target;\n    id = target.id;\n    list = target.parentNode.children;\n    for (let i = 0; i < list.length; i += 1) {\n      \tif (list[i] === dragged) {\n        index = i;\n      }\n    }\n  });\n\n  document.addEventListener('dragover', (event) => {\n    event.preventDefault();\n  });\n\n  document.addEventListener('drop', ({ target }) => {\n    // console.log('target.p.p drop:[',target.parentElement.parentElement,'] target.p.cN drop :[',target.parentElement.className,']');\n    if (target.parentElement.parentElement.classList[0] === 'preview-tile' && target.parentElement.parentElement.id !== id) {\n      dragged.remove(dragged);\n      for (let i = 0; i < list.length; i += 1) {\n      \tif (list[i] === target.parentElement.parentElement) {\n          indexDrop = i;\n        }\n      }\n      if (index > indexDrop) {\n        target.parentElement.parentElement.before(dragged);\n      } else {\n        target.parentElement.parentElement.after(dragged);\n      }\n\n      // swap frame\n      const del = canvasHistory.splice(dragged.id, 1);\n      canvasHistory.splice(target.parentElement.parentElement.id, 0, String(del));\n\n      // update index\n      for (let i = 0; i < ulList.childNodes.length - 1; i += 1) {\n        ulList.childNodes[i].children[4].textContent = i + 1;\n        ulList.childNodes[i].id = i;\n      }\n    }\n  });\n}\n\n\n//# sourceURL=webpack:///./src/app.js?");

/***/ }),

/***/ "./src/create/canvasTools.js":
/*!***********************************!*\
  !*** ./src/create/canvasTools.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const { floodFill, drawline } = __webpack_require__(/*! ./functions */ \"./src/create/functions.js\");\n\nconst canvasHistory = [''];\nconst remove = [];\n\nfunction pencil(size, color) {\n  const canvas = document.getElementById('mycanvas');\n  const context = canvas.getContext('2d');\n  canvas.removeEventListener('mousedown', remove[0]);\n  canvas.removeEventListener('mousemove', remove[1]);\n  canvas.removeEventListener('mouseup', remove[2]);\n  canvas.width = 256;\n  canvas.height = 256;\n  const pixelSize = size; // 32x32 [8] 64x64 [4] 128x128 [2]\n  context.fillStyle = color;\n  let isDrawing = false;\n  const liSelected = document.getElementsByClassName('li-selected');\n  const dataURL = canvasHistory[liSelected[0].id];\n  const img = new Image();\n  img.src = dataURL;\n  img.onload = () => {\n    context.drawImage(img, 0, 0, canvas.width, canvas.height);\n  };\n\n  const pencilmousedown = ({ layerX, layerY }) => {\n    console.log('<pencil>');\n    context.fillRect(Math.floor(layerX / pixelSize) * pixelSize, Math.floor(layerY / pixelSize) * pixelSize, pixelSize, pixelSize);\n    isDrawing = true;\n  };\n  const pencilmousemove = ({ layerX, layerY }) => {\n    if (isDrawing === true) {\n      // drawline(layerX, layerY, layerX, layerY);\n      context.fillRect(Math.floor(layerX / pixelSize) * pixelSize, Math.floor(layerY / pixelSize) * pixelSize, pixelSize, pixelSize);\n    }\n  };\n  const pencilmouseup = () => {\n    // localStorage.setItem('piskel', canvas.toDataURL());\n    const liSelected = document.getElementsByClassName('li-selected');\n    canvasHistory[liSelected[0].id] = canvas.toDataURL(); // set array\n    const dataURL = canvasHistory[liSelected[0].id];\n    const canvasFrame = liSelected[0].children[0].children[1]; // set frame\n    const ctx = canvasFrame.getContext('2d');\n    const img = new Image();\n    img.src = dataURL;\n    img.onload = () => {\n      ctx.drawImage(img, 0, 0, canvasFrame.width, canvasFrame.height);\n    };\n    if (isDrawing === true) {\n      isDrawing = false;\n    }\n  };\n  canvas.addEventListener('mousedown', pencilmousedown);\n  canvas.addEventListener('mousemove', pencilmousemove);\n  canvas.addEventListener('mouseup', pencilmouseup);\n  remove[0] = pencilmousedown;\n  remove[1] = pencilmousemove;\n  remove[2] = pencilmouseup;\n}\n\nfunction eraser(size) {\n  const canvas = document.getElementById('mycanvas');\n  const context = canvas.getContext('2d');\n  canvas.removeEventListener('mousedown', remove[0]);\n  canvas.removeEventListener('mousemove', remove[1]);\n  canvas.removeEventListener('mouseup', remove[2]);\n  canvas.width = 256;\n  canvas.height = 256;\n  const pixelSize = size; // 32x32 [8] 64x64 [4] 128x128 [2]\n  let isDrawing = false;\n  const liSelected = document.getElementsByClassName('li-selected');\n  const dataURL = canvasHistory[liSelected[0].id];\n  const img = new Image();\n  img.src = dataURL;\n  img.onload = () => {\n    context.drawImage(img, 0, 0, canvas.width, canvas.height);\n  };\n  const erasermousedown = ({ layerX, layerY }) => {\n    console.log('<eraser>');\n    context.clearRect(Math.floor(layerX / pixelSize) * pixelSize, Math.floor(layerY / pixelSize) * pixelSize, pixelSize, pixelSize);\n    isDrawing = true;\n  };\n  const erasermousemove = ({ layerX, layerY }) => {\n    if (isDrawing === true) {\n      context.clearRect(Math.floor(layerX / pixelSize) * pixelSize, Math.floor(layerY / pixelSize) * pixelSize, pixelSize, pixelSize);\n    }\n  };\n  const erasermouseup = () => {\n    const liSelected = document.getElementsByClassName('li-selected');\n    canvasHistory[liSelected[0].id] = canvas.toDataURL(); // set array\n    const dataURL = canvasHistory[liSelected[0].id];\n    const canvasFrame = liSelected[0].children[0].children[1]; // set frame\n    const ctx = canvasFrame.getContext('2d');\n    const img = new Image();\n    img.src = dataURL;\n    ctx.clearRect(0, 0, canvasFrame.width, canvasFrame.height);\n    img.onload = () => {\n      ctx.drawImage(img, 0, 0, canvasFrame.width, canvasFrame.height);\n    };\n\n    if (isDrawing === true) {\n      isDrawing = false;\n    }\n  };\n  canvas.addEventListener('mousedown', erasermousedown);\n  canvas.addEventListener('mousemove', erasermousemove);\n  canvas.addEventListener('mouseup', erasermouseup);\n  remove[0] = erasermousedown;\n  remove[1] = erasermousemove;\n  remove[2] = erasermouseup;\n}\n\nfunction bucket(color) {\n  const canvas = document.getElementById('mycanvas');\n  const context = canvas.getContext('2d');\n  canvas.removeEventListener('mousedown', remove[0]);\n  canvas.removeEventListener('mousemove', remove[1]);\n  canvas.removeEventListener('mouseup', remove[2]);\n  canvas.width = 256;\n  canvas.height = 256;\n  const liSelected = document.getElementsByClassName('li-selected');\n  const dataURL = canvasHistory[liSelected[0].id];\n  const img = new Image();\n  img.src = dataURL;\n  img.onload = () => {\n    context.drawImage(img, 0, 0, canvas.width, canvas.height);\n  };\n  const bucketmousedown = ({ layerX, layerY }) => {\n    console.log('<bucket>');\n    const rgb = [parseInt(color.substr(1, 2), 16), parseInt(color.substr(3, 2), 16), parseInt(color.substr(5, 2), 16), 255];\n    floodFill(context, layerX, layerY, rgb);\n\n    const liSelected = document.getElementsByClassName('li-selected');\n    canvasHistory[liSelected[0].id] = canvas.toDataURL(); // set array\n    const dataURL = canvasHistory[liSelected[0].id];\n    const canvasFrame = liSelected[0].children[0].children[1]; // set frame\n    const ctx = canvasFrame.getContext('2d');\n    const img = new Image();\n    img.src = dataURL;\n    ctx.clearRect(0, 0, canvasFrame.width, canvasFrame.height);\n    img.onload = () => {\n      ctx.drawImage(img, 0, 0, canvasFrame.width, canvasFrame.height);\n    };\n  };\n  canvas.addEventListener('mousedown', bucketmousedown);\n  remove[0] = bucketmousedown;\n}\n\nfunction stroke(size, color) {\n  const canvas = document.getElementById('mycanvas');\n  // const context = canvas.getContext('2d');\n  canvas.removeEventListener('mousedown', remove[0]);\n  canvas.removeEventListener('mousemove', remove[1]);\n  canvas.removeEventListener('mouseup', remove[2]);\n  let x0;\n  let y0;\n\n  const strokemousedown = ({ layerX, layerY }) => {\n    console.log('<stroke>');\n    x0 = layerX;\n    y0 = layerY;\n  };\n  const strokemouseup = ({ layerX, layerY }) => {\n    drawline(x0, y0, layerX, layerY, size, color);\n\n    const liSelected = document.getElementsByClassName('li-selected');\n    canvasHistory[liSelected[0].id] = canvas.toDataURL(); // set array\n    const dataURL = canvasHistory[liSelected[0].id];\n    const canvasFrame = liSelected[0].children[0].children[1]; // set frame\n    const ctx = canvasFrame.getContext('2d');\n    const img = new Image();\n    img.src = dataURL;\n    img.onload = () => {\n      ctx.drawImage(img, 0, 0, canvasFrame.width, canvasFrame.height);\n    };\n  };\n  canvas.addEventListener('mousedown', strokemousedown);\n  canvas.addEventListener('mouseup', strokemouseup);\n  remove[0] = strokemousedown;\n  remove[2] = strokemouseup;\n}\n\nfunction picker() {\n  const canvas = document.getElementById('mycanvas');\n  const context = canvas.getContext('2d');\n  canvas.removeEventListener('mousedown', remove[0]);\n  canvas.removeEventListener('mousemove', remove[1]);\n  canvas.removeEventListener('mouseup', remove[2]);\n\n  const pickermousedown = ({ layerX, layerY }) => {\n    console.log('<picker>');\n    let intovalue = '#';\n    const imgData = context.getImageData(layerX, layerY, 1, 1);\n    console.log(imgData);\n    for (let i = 0; i < 3; i += 1) {\n      if (imgData.data[i] === 0) {\n        intovalue += '00';\n      } else {\n        intovalue += imgData.data[i].toString(16);\n      }\n    }\n    console.log('pick:',intovalue);\n    //arrayColor.push(intovalue);\n  };\n\n  canvas.addEventListener('mousedown', pickermousedown);\n  remove[0] = pickermousedown;\n}\n\nfunction bucketall(color) {\n  const canvas = document.getElementById('mycanvas');\n  const context = canvas.getContext('2d');\n  context.fillStyle = color;\n  canvas.removeEventListener('mousedown', remove[0]);\n  canvas.removeEventListener('mousemove', remove[1]);\n  canvas.removeEventListener('mouseup', remove[2]);\n\n  const bucketallmousedown = () => {\n    console.log('<bucketall>');\n    context.fillRect(0, 0, canvas.width, canvas.height);\n  };\n  const bucketallmouseup = () => {\n    const liSelected = document.getElementsByClassName('li-selected');\n    canvasHistory[liSelected[0].id] = canvas.toDataURL(); // set array\n    const dataURL = canvasHistory[liSelected[0].id];\n    const canvasFrame = liSelected[0].children[0].children[1]; // set frame\n    const ctx = canvasFrame.getContext('2d');\n    const img = new Image();\n    img.src = dataURL;\n    img.onload = () => {\n      ctx.drawImage(img, 0, 0, canvasFrame.width, canvasFrame.height);\n    };\n  };\n  \n  canvas.addEventListener('mousedown', bucketallmousedown);\n  canvas.addEventListener('mouseup', bucketallmouseup);\n  remove[0] = bucketallmousedown;\n  remove[2] = bucketallmouseup;\n}\n\nmodule.exports = {\n  pencil,\n  eraser,\n  bucket,\n  stroke,\n  picker,\n  bucketall,\n  canvasHistory,\n};\n\n\n//# sourceURL=webpack:///./src/create/canvasTools.js?");

/***/ }),

/***/ "./src/create/create.js":
/*!******************************!*\
  !*** ./src/create/create.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function createHtml() {\n  // naviagator\n  const wrapperNavigation = document.createElement('div');\n  wrapperNavigation.setAttribute('class', 'navigation');\n  document.body.appendChild(wrapperNavigation);\n\n  const wrapperButtons = wrapperNavigation.cloneNode(false);\n  const wrapperLogo = document.createElement('div');\n  const logo = document.createElement('h1');\n  wrapperButtons.setAttribute('class', 'wrapperButtons');\n  wrapperLogo.setAttribute('class', 'wrapperLogo');\n  logo.setAttribute('class', 'logo');\n  logo.textContent = 'Create PISKEL';\n  wrapperLogo.append(logo);\n  wrapperNavigation.append(wrapperLogo);\n  wrapperNavigation.append(wrapperButtons);\n\n  const buttonCreate = document.createElement('a');\n  const buttonLog = document.createElement('a');\n  buttonCreate.setAttribute('class', 'button create');\n  buttonCreate.setAttribute('href', '/create.html');\n  buttonCreate.textContent = 'Create Sprite';\n  buttonLog.setAttribute('class', 'button log');\n  buttonLog.textContent = 'Sign in';\n  wrapperButtons.append(buttonCreate);\n  wrapperButtons.append(buttonLog);\n\n  // main start ---------------------\n  const wrapperMain = document.createElement('div');\n  wrapperMain.setAttribute('class', 'main-wrapper');\n  const toolsSection = document.createElement('div');\n  toolsSection.setAttribute('class', 'tools-section');\n  const centerSection = document.createElement('div');\n  centerSection.setAttribute('class', 'center-section');\n  const rightSection = document.createElement('div');\n  rightSection.setAttribute('class', 'right-section');\n\n  // tools section\n  const toolsSize = document.createElement('div');\n  toolsSize.setAttribute('class', 'tools-size');\n  for (let i = 1; i < 5; i += 1) {\n    const size = document.createElement('div');\n    size.setAttribute('class', `size${i}`);\n    size.textContent = `${i}`;\n    toolsSize.append(size);\n  }\n\n  const tools = document.createElement('ul');\n  tools.setAttribute('class', 'tools');\n  const toolsArr = ['pencil', 'bucket', 'eraser', 'stroke', 'picker', 'bucketall'];\n  for (let i = 0; i < toolsArr.length; i += 1) {\n    const li = document.createElement('li');\n    if (i === 0) {\n      li.setAttribute('style', 'border:3px solid gold;margin: 10px -2px;');\n    }\n    li.setAttribute('class', `${toolsArr[i]}`);\n    tools.append(li);\n  }\n\n  const colorSection = document.createElement('div');\n  colorSection.setAttribute('class', 'color-section');\n  const colorArr = ['left-color', 'right-color', 'swap-color'];\n  const mouseArray = ['left-mouse', 'right-mouse'];\n  for (let i = 0; i < colorArr.length; i += 1) {\n    const div = document.createElement('div');\n    div.setAttribute('class', `${colorArr[i]}`);\n    if (i === 0 || i === 1) {\n      const inputcolor = document.createElement('input');\n      inputcolor.setAttribute('type', 'color');\n      inputcolor.setAttribute('class', mouseArray[i]);\n      div.append(inputcolor);\n    }\n    colorSection.append(div);\n  }\n  toolsSection.append(toolsSize);\n  toolsSection.append(tools);\n  toolsSection.append(colorSection);\n\n  wrapperMain.append(toolsSection);\n\n  // // center section\n  // left column\n  const divLeftColumn = document.createElement('div');\n  divLeftColumn.setAttribute('class', 'left-column');\n  const previewWrapperDiv = document.createElement('div');\n  previewWrapperDiv.setAttribute('class', 'preview-list-wrapper');\n  const previewScrollerDiv = document.createElement('div');\n  const topDiv = document.createElement('div');\n  const bottomDiv = document.createElement('div');\n  previewScrollerDiv.setAttribute('class', 'preview-list-scroller');\n  topDiv.setAttribute('class', 'top-overflow');\n  bottomDiv.setAttribute('class', 'bottom-overflow');\n  const previewList = document.createElement('ul');\n  previewList.setAttribute('class', 'preview-list');\n  const liDataTile = document.createElement('li');\n  const divAddFrame = document.createElement('div');\n  liDataTile.setAttribute('class', 'preview-tile li-selected');\n  liDataTile.setAttribute('draggable', 'true');\n  liDataTile.setAttribute('id', '0');\n  divAddFrame.setAttribute('class', 'add-frame-action');\n  const addFrameIcon = document.createElement('div');\n  const addFrameLabel = document.createElement('div');\n  addFrameIcon.setAttribute('class', 'add-frame-action-icon');\n  addFrameLabel.setAttribute('class', 'add-frame-action-label');\n  addFrameLabel.textContent = 'Add new frame';\n  // for li add frame\n  const divCanvasContainer = document.createElement('div');\n  divCanvasContainer.setAttribute('class', 'canvas-container');\n  const divCanvasBackground = document.createElement('div');\n  const canvas = document.createElement('canvas');\n  divCanvasBackground.setAttribute('class', 'canvas-background');\n  canvas.setAttribute('class', 'tile-view-canvas');\n  canvas.setAttribute('width', '96');\n  canvas.setAttribute('height', '96');\n  divCanvasContainer.append(divCanvasBackground);\n  divCanvasContainer.append(canvas);\n  liDataTile.append(divCanvasContainer);\n  const buttonClone = document.createElement('button');\n  const buttonDelete = document.createElement('button');\n  const divDragndrop = document.createElement('div');\n  const buttonToggle = document.createElement('button');\n  buttonClone.setAttribute('class', 'tile-overlay clone-button');\n  buttonDelete.setAttribute('class', 'tile-overlay delete-button');\n  divDragndrop.setAttribute('class', 'tile-overlay dragndrop-button');\n  buttonToggle.setAttribute('class', 'tile-overlay toggle-button');\n  buttonToggle.textContent = '1';\n  liDataTile.append(buttonClone);\n  liDataTile.append(buttonDelete);\n  liDataTile.append(divDragndrop);\n  liDataTile.append(buttonToggle);\n\n  divAddFrame.append(addFrameIcon);\n  divAddFrame.append(addFrameLabel);\n  previewList.append(liDataTile);\n  previewList.append(divAddFrame);\n  previewScrollerDiv.append(previewList);\n  previewWrapperDiv.append(previewScrollerDiv);\n  previewWrapperDiv.append(topDiv);\n  previewWrapperDiv.append(bottomDiv);\n  divLeftColumn.append(previewWrapperDiv);\n  centerSection.append(divLeftColumn);\n\n  // main column\n  const divMainColumn = document.createElement('div');\n  divMainColumn.setAttribute('class', 'main-column');\n  const divDrawingCanvas = document.createElement('div');\n  divDrawingCanvas.setAttribute('class', 'drawing-canvas-container');\n  const divCanvasContainerMain = document.createElement('div');\n  const canvas128 = document.createElement('canvas');\n  divCanvasContainerMain.setAttribute('class', 'canvas-background-draw');\n  canvas128.setAttribute('id', 'mycanvas');\n  // canvas128.setAttribute('width', '128');\n  // canvas128.setAttribute('height', '128');\n\n  divDrawingCanvas.append(divCanvasContainerMain);\n  divDrawingCanvas.append(canvas128);\n  divMainColumn.append(divDrawingCanvas);\n  centerSection.append(divMainColumn);\n\n  // right column\n  const divRightColumn = document.createElement('div');\n  divRightColumn.setAttribute('class', 'right-column');\n  const divAnimatedPreview = document.createElement('div');\n  divAnimatedPreview.setAttribute('class', 'animated-preview-container');\n\n  const divMiniMapCanvas = document.createElement('div');\n  const div = document.createElement('div');\n  divMiniMapCanvas.setAttribute('class', 'mini-map-canvas');\n  const divBackgroundMiniMap = document.createElement('div');\n  const divRepeatMiniMap = document.createElement('div');\n  divBackgroundMiniMap.setAttribute('class', 'canvas-background-mini');\n  divRepeatMiniMap.setAttribute('class', 'repeat-mini-map');\n\n  divMiniMapCanvas.append(divBackgroundMiniMap);\n  divMiniMapCanvas.append(divRepeatMiniMap);\n  divAnimatedPreview.append(divMiniMapCanvas);\n\n  const spanFPS = document.createElement('span');\n  const inputFPS = document.createElement('input');\n  spanFPS.setAttribute('class', 'number-FPS');\n  spanFPS.textContent = '2 FPS';\n  inputFPS.setAttribute('type', 'range');\n  inputFPS.setAttribute('class', 'range-FPS');\n  inputFPS.setAttribute('min', '0');\n  inputFPS.setAttribute('max', '24');\n  inputFPS.setAttribute('value', '2');\n\n  div.append(spanFPS);\n  div.append(inputFPS);\n  divAnimatedPreview.append(div);\n  divRightColumn.append(divAnimatedPreview);\n  centerSection.append(divRightColumn);\n\n  wrapperMain.append(centerSection);\n\n  // // right section\n  const settingArray = ['resize', 'save', 'export'];\n  for (let i = 0; i < settingArray.length; i += 1) {\n    const divset = document.createElement('div');\n    divset.setAttribute('class', `${settingArray[i]}`);\n    if (i === 0) {\n      const sizeArray = ['size32', 'size64', 'size128'];\n      const contentArray = ['32x32', '64x64', '128x128'];\n      for (let j = 0; j < sizeArray.length; j += 1) {\n        const size = document.createElement('span');\n        if (j === 0) {\n          size.setAttribute('class', `${sizeArray[j]} active-gold`);\n        } else {\n          size.setAttribute('class', `${sizeArray[j]}`);\n        }\n        size.textContent = `${contentArray[j]}`;\n        divset.append(size);\n      }\n    }\n    rightSection.append(divset);\n  }\n  divMainColumn.append(rightSection); // wrapperMain.append(rightSection);\n  document.body.appendChild(wrapperMain);\n  return 'done';\n}\n\nmodule.exports = {\n  createHtml,\n};\n\n\n//# sourceURL=webpack:///./src/create/create.js?");

/***/ }),

/***/ "./src/create/functions.js":
/*!*********************************!*\
  !*** ./src/create/functions.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\n// swap\nArray.prototype.swap = function (x, y) {\n  const b = this[x];\n  this[x] = this[y];\n  this[y] = b;\n  return this;\n};\n\n// mark active tile canvas\nfunction markActiveTile(target, canvasHistory) {\n  target.parentElement.parentElement.setAttribute('class', 'preview-tile li-selected');\n  const canvasMain = document.getElementById('mycanvas');\n  const ctx = canvasMain.getContext('2d');\n  ctx.clearRect(0, 0, canvasMain.width, canvasMain.height);\n\n  const liSelected = document.getElementsByClassName('li-selected');\n  const dataURL = canvasHistory[liSelected[0].id];\n  const img = new Image();\n  img.src = dataURL;\n  img.onload = () => {\n    ctx.drawImage(img, 0, 0, canvasMain.width, canvasMain.height);\n  };\n}\n\n// remove active frame\nfunction removeActiveFrame() {\n  const elements = document.querySelectorAll('.preview-tile');\n  for (let i = 0; i < elements.length; i += 1) {\n    elements[i].setAttribute('class', 'preview-tile');\n  }\n}\n\n// remove active tool\nfunction removeActiveTool(target) {\n  const tools = document.querySelector('.tools').children;\n  for (let i = 0; i < tools.length; i += 1) {\n    tools[i].removeAttribute('style');\n  }\n  target.setAttribute('style', 'border:3px solid gold;margin: 10px -2px;');\n}\n\n// bucket\nfunction getPixel(imageData, x, y) {\n  if (x < 0 || y < 0 || x >= imageData.width || y >= imageData.height) {\n    return [-1, -1, -1, -1]; // impossible color\n  }\n  const offset = (y * imageData.width + x) * 4;\n  return imageData.data.slice(offset, offset + 4);\n}\n\nfunction setPixel(imageData, x, y, color) {\n  const offset = (y * imageData.width + x) * 4;\n  imageData.data[offset + 0] = color[0];\n  imageData.data[offset + 1] = color[1];\n  imageData.data[offset + 2] = color[2];\n  imageData.data[offset + 3] = color[0];\n}\n\nfunction colorsMatch(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n\nfunction floodFill(ctx, x, y, fillColor) {\n  const imageData = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);\n  const targetColor = getPixel(imageData, x, y);\n  if (!colorsMatch(targetColor, fillColor)) {\n    const pixelsToCheck = [x, y];\n    while (pixelsToCheck.length > 0) {\n      const y = pixelsToCheck.pop();\n      const x = pixelsToCheck.pop();\n      const currentColor = getPixel(imageData, x, y);\n      if (colorsMatch(currentColor, targetColor)) {\n        setPixel(imageData, x, y, fillColor);\n        pixelsToCheck.push(x + 1, y);\n        pixelsToCheck.push(x - 1, y);\n        pixelsToCheck.push(x, y + 1);\n        pixelsToCheck.push(x, y - 1);\n      }\n    }\n    ctx.putImageData(imageData, 0, 0);\n  }\n}\n\n// draw stroke\n\nfunction drawline(x0, y0, x1, y1, size, color) {\n  const canvas = document.getElementById('mycanvas');\n  const context = canvas.getContext('2d');\n  context.fillStyle = color;\n  const pxl = size;\n\n  const dx = Math.abs(x1 - x0);\n  const dy = Math.abs(y1 - y0);\n  const sx = (x0 < x1) ? 1 : -1;\n  const sy = (y0 < y1) ? 1 : -1;\n  let err = dx - dy;\n\n  while (true) {\n    context.fillRect(Math.floor(x0 / pxl) * pxl, Math.floor(y0 / pxl) * pxl, pxl, pxl); // setPixel(x0, y0);\n\n    if ((x0 === x1) && (y0 === y1)) break;\n    const e2 = 2 * err;\n    if (e2 > -dy) { err -= dy; x0 += sx; }\n    if (e2 < dx) { err += dx; y0 += sy; }\n  }\n}\n\n/*\nconst drawline = (x1, y1, x2, y2) => {\n  const canvas = document.getElementById('mycanvas');\n  const context = canvas.getContext('2d');\n  const pxl = 8;\n  let x; let y; let dx; let dy; let dx1; let dy1; let px; let py; let xe; let ye; let\n    i;\n  dx = x2 - x1;\n  dy = y2 - y1;\n  dx1 = Math.abs(dx);\n  dy1 = Math.abs(dy);\n  px = 2 * dy1 - dx1;\n  py = 2 * dx1 - dy1;\n\n  if (dy1 <= dx1) {\n    if (dx >= 0) {\n      x = x1; y = y1; xe = x2;\n    } else {\n      x = x2; y = y2; xe = x1;\n    }\n    context.fillRect(Math.floor(x / pxl) * pxl, Math.floor(y / pxl) * pxl, pxl, pxl);\n\n    for (i = 0; x < xe; i++) {\n      x += 1;\n\n      if (px < 0) {\n        px += 2 * dy1;\n      } else {\n        if ((dx < 0 && dy < 0) || (dx > 0 && dy > 0)) {\n          y += 1;\n        } else {\n          y -= 1;\n        }\n        px += 2 * (dy1 - dx1);\n      }\n      context.fillRect(Math.floor(x / pxl) * pxl, Math.floor(y / pxl) * pxl, pxl, pxl);\n    }\n  } else {\n    if (dy >= 0) {\n      x = x1; y = y1; ye = y2;\n    } else {\n      x = x2; y = y2; ye = y1;\n    }\n    context.fillRect(Math.floor(x / pxl) * pxl, Math.floor(y / pxl) * pxl, pxl, pxl);\n\n    for (i = 0; y < ye; i++) {\n      y += 1;\n      if (py <= 0) {\n        py += 2 * dx1;\n      } else {\n        if ((dx < 0 && dy < 0) || (dx > 0 && dy > 0)) {\n          x += 1;\n        } else {\n          x -= 1;\n        }\n        py += 2 * (dx1 - dy1);\n      }\n      context.fillRect(Math.floor(x / pxl) * pxl, Math.floor(y / pxl) * pxl, pxl, pxl);\n    }\n  }\n}; */\n\nmodule.exports = {\n  removeActiveTool,\n  floodFill,\n  drawline,\n  removeActiveFrame,\n  markActiveTile,\n};\n\n\n//# sourceURL=webpack:///./src/create/functions.js?");

/***/ }),

/***/ "./src/landing/landing.js":
/*!********************************!*\
  !*** ./src/landing/landing.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function landingHtml() {\n  // naviagator\n  const wrapperNavigation = document.createElement('div');\n  wrapperNavigation.setAttribute('class', 'navigation');\n  document.body.appendChild(wrapperNavigation);\n\n  const wrapperButtons = wrapperNavigation.cloneNode(false);\n  const wrapperLogo = document.createElement('div');\n  const logo = document.createElement('h1');\n  wrapperButtons.setAttribute('class', 'wrapperButtons');\n  wrapperLogo.setAttribute('class', 'wrapperLogo');\n  logo.setAttribute('class', 'logo');\n  logo.textContent = 'MY PISKEL';\n  wrapperLogo.append(logo);\n  wrapperNavigation.append(wrapperLogo);\n  wrapperNavigation.append(wrapperButtons);\n\n  const buttonCreate = document.createElement('a');\n  const buttonLog = document.createElement('a');\n  buttonCreate.setAttribute('class', 'button create');\n  buttonCreate.setAttribute('href', '/create.html');\n  buttonCreate.textContent = 'Create Sprite';\n  buttonLog.setAttribute('class', 'button log');\n  buttonLog.textContent = 'Sign in';\n  wrapperButtons.append(buttonCreate);\n  wrapperButtons.append(buttonLog);\n\n  // main\n  const wrapperMain = document.createElement('div');\n  wrapperMain.setAttribute('class', 'main-wrapper');\n  wrapperMain.textContent = '- Screenshots - Animation examples - Implemented functionality overview - Link to the editor itself - Information about the author';\n  document.body.appendChild(wrapperMain);\n\n  // footer\n  const footer = document.createElement('div');\n  footer.setAttribute('class', 'footer');\n  document.body.appendChild(footer);\n\n  const footerItems = document.createElement('div');\n  footerItems.setAttribute('class', 'footerItems');\n\n  const itemGit = document.createElement('div');\n  itemGit.setAttribute('class', 'github');\n\n  const imgGit = document.createElement('img');\n  const spanGit = document.createElement('span');\n  const aGit = document.createElement('a');\n  aGit.setAttribute('href', 'https://github.com/mrINEX');\n  imgGit.setAttribute('src', './src/image/github-logo.png');\n  aGit.textContent = 'GitHub';\n\n  itemGit.append(imgGit);\n  itemGit.append(spanGit);\n  spanGit.append(aGit);\n  footerItems.append(itemGit);\n  footer.append(footerItems);\n  return 'done';\n}\n\nmodule.exports = {\n  landingHtml,\n};\n\n\n//# sourceURL=webpack:///./src/landing/landing.js?");

/***/ })

/******/ });